import numpy as np
import pandas as pd

data=[[8,8,1],[7,9,1],[6,10,0],[5,5,0]]
columns=['cgpa','profile_score','lpa']
df=pd.DataFrame(data,columns=columns)
df

def initialize_parameters(layer_dims):
    np.random.seed(3)
    parameters={}
    L=len(layer_dims)
    
    for l in range(1,L):
        parameters['W'+ str(l)]=np.ones((layer_dims[l-1],layer_dims[l]))*0.1  
        parameters['b'+ str(l)]=np.zeros((layer_dims[l],1))
        
    return parameters  

parameters=initialize_parameters([2,2,1])

def sigmoid(Z):
    A=1/(1+np.exp(-Z))
    return A

def linear_forward(A_prev,W,b):
    Z=np.dot(W.T,A_prev)+b
    A=sigmoid(Z)
    return A

#Forward Propagation
def l_layer_forward(X,parameters):# X is the input ie cgpa and profile_score
    A=X
    L=len(parameters)//2

    for l in range(1,L+1):
        A_prev=A
        W1=parameters['W'+str(l)]
        b1=parameters['b'+str(l)]
        print("A"+str(l-1)+": ",A_prev)
        print("W"+str(l)+": ",W1) 
        print("b"+str(l)+": ",b1)
        print("--"*20)
    
        A=linear_forward(A_prev,W1,b1)
        print("A"+str(l)+": ",A)
        print("**"*20)
    
    return A,A_pre

def update_parameters(parameters,y,y_hat,A1,X):
    parameters['W2'][0][0]=parameters['W2'][0][0]+(0.001*(y-y_hat)*A1[0][0])
    parameters['W2'][1][0]=parameters['W2'][1][0]+(0.001*(y-y_hat)*A1[1][0])
    parameters['b2'][0][0]=parameters['b2'][0][0]+(0.001*(y-y_hat))
    
    parameters['W1'][0][0]=parameters['W1'][0][0]+(0.001*(y-y_hat)*parameters['W2'][0][0]*A1[0][0]*(1-A1[0][0]*X[0][0]))
    parameters['W1'][0][1]=parameters['W1'][0][1]+(0.001*(y-y_hat)*parameters['W2'][0][0]*A1[0][0]*(1-A1[0][0]*X[1][0]))
    parameters['b1'][0][0]=parameters['b1'][0][0]+(0.001*(y-y_hat)*parameters['W2'][0][0]*A1[0][0]*(1-A1[0][0]))
    
    parameters['W1'][1][0]=parameters['W1'][1][0]+(0.001*(y-y_hat)*parameters['W2'][1][0]*A1[1][0]*(1-A1[1][0]*X[0][0]))
    parameters['W1'][1][1]=parameters['W1'][0][1]+(0.001*(y-y_hat)*parameters['W2'][1][0]*A1[1][0]*(1-A1[1][0]*X[1][0]))
    parameters['b1'][1][0]=parameters['b1'][1][0]+(0.001*(y-y_hat)*parameters['W2'][1][0]*A1[1][0]*(1-A1[1][0]))

parameters = initialize_parameters([2,2,1])
epochs = 50

for i in range(epochs):

  Loss = []

  for j in range(df.shape[0]):

    X = df[['cgpa', 'profile_score']].values[j].reshape(2,1) # Shape(no of features, no. of training example)
    y = df[['lpa']].values[j][0]

    # Parameter initialization


    y_hat,A1 = l_layer_forward(X,parameters)
    y_hat = y_hat[0][0]

    update_parameters(parameters,y,y_hat,A1,X)

    Loss.append(-y*np.log(y_hat) - (1-y)*np.log(1-y_hat))

  print('Epoch - ',i+1,'Loss - ',np.array(Loss).mean())
parameters
